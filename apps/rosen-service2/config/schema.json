{
  "logs": {
    "type": "array",
    "items": {
      "type": "object",
      "children": {
        "type": {
          "type": "string",
          "description": "options: file, console, loki",
          "default": "file",
          "validations": [
            {
              "required": true,
              "error": "log type must be specified"
            },
            { "choices": ["file", "console", "loki"] }
          ]
        },
        "maxSize": {
          "type": "string",
          "default": "20m",
          "validations": [
            {
              "required": true,
              "error": "maxSize for file log type must be specified",
              "when": { "path": "logs.type", "value": "file" }
            }
          ]
        },
        "maxFiles": {
          "type": "string",
          "default": "14d",
          "validations": [
            {
              "required": true,
              "error": "maxFiles for file log type must be specified",
              "when": { "path": "logs.type", "value": "file" }
            }
          ]
        },
        "path": {
          "type": "string",
          "validations": [
            {
              "required": true,
              "error": "path for file log type must be specified",
              "when": { "path": "logs.type", "value": "file" }
            }
          ]
        },
        "level": {
          "type": "string",
          "default": "info",
          "validations": [
            {
              "required": true,
              "error": "log level must be specified"
            }
          ]
        },
        "host": {
          "type": "string",
          "validations": [
            {
              "required": true,
              "error": "host for the \"loki\" log type must be specified",
              "when": { "path": "logs.type", "value": "loki" }
            }
          ]
        }
      }
    }
  },
  "database": {
    "type": "object",
    "children": {
      "type": {
        "type": "string",
        "default": "sqlite",
        "description": "options: postgres, sqlite",
        "validations": [
          {
            "required": true,
            "error": "database type must be specified"
          },
          { "choices": ["sqlite", "postgres"] }
        ]
      },
      "path": {
        "type": "string",
        "default": "./sqlite/watcher.sqlite",
        "description": "database path for sqlite",
        "validations": [
          {
            "required": true,
            "error": "database path must be specified for the sqlite database",
            "when": { "path": "database.type", "value": "sqlite" }
          }
        ]
      },
      "host": {
        "type": "string",
        "description": "database host",
        "validations": [
          {
            "required": true,
            "error": "database host must be specified",
            "when": { "path": "database.type", "value": "postgres" }
          }
        ]
      },
      "port": {
        "type": "number",
        "default": 5432,
        "description": "database port",
        "validations": [
          {
            "required": true,
            "error": "database port must be specified",
            "when": { "path": "database.type", "value": "postgres" }
          }
        ]
      },
      "user": {
        "type": "string",
        "description": "database user",
        "validations": [
          {
            "required": true,
            "error": "database user must be specified",
            "when": { "path": "database.type", "value": "postgres" }
          }
        ]
      },
      "password": {
        "type": "string",
        "description": "database password",
        "validations": [
          {
            "required": true,
            "error": "database password must be specified",
            "when": { "path": "database.type", "value": "postgres" }
          }
        ]
      },
      "name": {
        "type": "string",
        "description": "database name",
        "validations": [
          {
            "required": true,
            "error": "database name must be specified",
            "when": { "path": "database.type", "value": "postgres" }
          }
        ]
      }
    }
  },
  "chains": {
    "type": "object",
    "children": {
      "ergo": {
        "type": "object",
        "children": {
          "network": {
            "type": "string",
            "description": "ergo network type, testnet or mainnet",
            "default": "mainnet",
            "validations": [
              {
                "required": true,
                "error": "ergo network type must be specified: testnet or mainnet"
              },
              { "choices": ["testnet", "mainnet"] }
            ]
          },
          "initialHeight": {
            "type": "number",
            "default": 0,
            "description": "ergo scanner initial height",
            "validations": [
              {
                "required": true,
                "error": "ergo's initial height must be specified"
              }
            ]
          },
          "mnemonic": {
            "type": "string",
            "description": "ergo watcher mnemonic"
          },
          "type": {
            "type": "string",
            "description": "ergo api type. options: node, explorer",
            "default": "node",
            "validations": [
              {
                "required": true,
                "error": "ergo type must be specified"
              },
              { "choices": ["node", "explorer"] }
            ]
          },
          "explorer": {
            "type": "object",
            "children": {
              "url": {
                "type": "string",
                "default": "https://api.ergoplatform.com",
                "description": "explorer url",
                "validations": [
                  {
                    "required": true,
                    "error": "url for Ergo explorer must be specified"
                  }
                ]
              },
              "timeout": {
                "type": "number",
                "default": 60,
                "description": "ergoexplorer request timeout (in seconds)",
                "validations": [
                  {
                    "required": true,
                    "error": "timeout for Ergo explorer must be specified"
                  }
                ]
              }
            }
          },
          "node": {
            "type": "object",
            "children": {
              "url": {
                "type": "string",
                "default": "",
                "description": "node url",
                "validations": [
                  {
                    "required": true,
                    "error": "url for Ergo node must be specified",
                    "when": { "path": "chains.ergo.type", "value": "node" }
                  }
                ]
              },
              "timeout": {
                "type": "number",
                "default": 60,
                "description": "node request timeout (in seconds)",
                "validations": [
                  {
                    "required": true,
                    "error": "timeout for Ergo node must be specified",
                    "when": { "path": "chains.ergo.type", "value": "node" }
                  }
                ]
              }
            }
          },
          "interval": {
            "type": "object",
            "children": {
              "scanner": {
                "type": "number",
                "description": "ergo scanner update interval (in seconds)",
                "default": 180,
                "validations": [
                  {
                    "required": true,
                    "error": "ergo scanner interval must be set"
                  }
                ]
              },
              "txPot": {
                "type": "number",
                "description": "ergo TxPot update interval (in seconds)",
                "default": 180,
                "validations": [
                  {
                    "required": true,
                    "error": "ergo TxPot interval must be set"
                  }
                ]
              },
              "observationTrack": {
                "type": "number",
                "description": "ergo observationTrack update interval (in seconds)",
                "default": 120,
                "validations": [
                  {
                    "required": true,
                    "error": "ergo observationTrack interval must be set"
                  }
                ]
              },
              "widStatus": {
                "type": "number",
                "description": "ergo WID status check interval (in seconds)",
                "default": 120,
                "validations": [
                  {
                    "required": true,
                    "error": "ergo WID status check interval must be set"
                  }
                ]
              }
            }
          },
          "scanner": {
            "type": "object",
            "children": {
              "criticalDifference": {
                "type": "number",
                "default": 10,
                "description": "critical difference between existing and scanned blocks height for Ergo scanner",
                "validations": [{ "required": true }]
              }
            }
          },
          "transaction": {
            "type": "object",
            "children": {
              "confirmations": {
                "type": "number",
                "description": "required block confirmations for sent transactions for Ergo blockchain",
                "default": 4,
                "validations": [
                  { "required": true, "error": "required block confirmations for Ergo blockchain must be set" }
                ]
              }
            }
          }
        }
      },
      "cardano": {
        "type": "object",
        "validations": [
          {
            "required": false
          }
        ],
        "children": {
          "active": {
            "type": "boolean",
            "description": "cardano activation state",
            "default": false,
            "validations": [
              {
                "required": true,
                "error": "cardano activation state must be set"
              }
            ]
          },
          "initial": {
            "type": "object",
            "children": {
              "slot": {
                "type": "number",
                "description": "cardano initial block global slot",
                "default": -1,
                "validations": [
                  {
                    "required": true,
                    "error": "cardano initial slot must be specified",
                    "when": { "path": "chains.cardano.type", "value": "ogmios" }
                  }
                ]
              },
              "hash": {
                "type": "string",
                "description": "cardano initial block hash",
                "default": "",
                "validations": [
                  {
                    "required": true,
                    "error": "cardano initial hash must be specified",
                    "when": { "path": "chains.cardano.type", "value": "ogmios" }
                  }
                ]
              },
              "height": {
                "type": "number",
                "description": "cardano initial height of scanning",
                "default": -1,
                "validations": [
                  {
                    "required": true,
                    "error": "cardano initial height must be specified",
                    "when": { "path": "chains.cardano.type", "value": "koios" }
                  },
                  {
                    "required": true,
                    "error": "cardano initial height must be specified",
                    "when": { "path": "chains.cardano.type", "value": "blockfrost" }
                  }
                ]
              }
            }
          },
          "type": {
            "type": "string",
            "description": "cardano api library to query Cardano blockchains. options: koios, ogmios, blockfrost",
            "validations": [
              {
                "required": true,
                "error": "cardano type must be specified",
                "when": { "path": "chains.cardano.active", "value": true }
              },
              { "choices": ["koios", "ogmios", "blockfrost"] }
            ]
          },
          "koios": {
            "type": "object",
            "children": {
              "interval": {
                "type": "number",
                "description": "cardano koios scanning interval (in seconds)",
                "default": 20,
                "validations": [
                  {
                    "required": true,
                    "error": "cardano koios interval must be specified",
                    "when": { "path": "chains.cardano.type", "value": "koios" }
                  }
                ]
              },
              "timeout": {
                "type": "number",
                "description": "cardano koios request timeout (in seconds)",
                "default": 10,
                "validations": [
                  {
                    "required": true,
                    "error": "cardano koios timeout must be specified",
                    "when": { "path": "chains.cardano.type", "value": "koios" }
                  }
                ]
              },
              "url": {
                "type": "string",
                "description": "cardano koios url",
                "default": "https://api.koios.rest/api/beta",
                "validations": [
                  {
                    "required": true,
                    "error": "cardano koios url must be specified",
                    "when": { "path": "chains.cardano.type", "value": "koios" }
                  }
                ]
              },
              "authToken": {
                "type": "string",
                "description": "cardano koios auth token",
                "default": ""
              }
            }
          },
          "ogmios": {
            "type": "object",
            "children": {
              "host": {
                "type": "string",
                "description": "cardano ogmios node host address",
                "default": "",
                "validations": [
                  {
                    "required": true,
                    "error": "cardano ogmios host must be specified",
                    "when": { "path": "chains.cardano.type", "value": "ogmios" }
                  }
                ]
              },
              "port": {
                "type": "number",
                "description": "cardano ogmios port",
                "default": 1337,
                "validations": [
                  {
                    "required": true,
                    "error": "cardano ogmios port must be specified",
                    "when": { "path": "chains.cardano.type", "value": "ogmios" }
                  }
                ]
              },
              "useTls": {
                "type": "boolean",
                "description": "cardano connect to ogmios using https or not",
                "default": false,
                "validations": [
                  {
                    "required": true,
                    "error": "cardano ogmios useTls must be specified",
                    "when": { "path": "chains.cardano.type", "value": "ogmios" }
                  }
                ]
              }
            }
          },
          "blockfrost": {
            "type": "object",
            "children": {
              "url": {
                "type": "string",
                "description": "url to connect to the cardano blockfrost",
                "default": ""
              },
              "projectId": {
                "type": "string",
                "description": "cardano blockfrost project Id",
                "default": "",
                "validations": [
                  {
                    "required": true,
                    "error": "cardano blockfrost projectId must be specified",
                    "when": { "path": "chains.cardano.type", "value": "blockfrost" }
                  }
                ]
              },
              "timeout": {
                "type": "number",
                "description": "cardano blockfrost request timeout",
                "default": 10,
                "validations": [
                  {
                    "required": true,
                    "error": "cardano blockfrost timeout must be specified",
                    "when": { "path": "chains.cardano.type", "value": "blockfrost" }
                  }
                ]
              },
              "interval": {
                "type": "number",
                "description": "cardano blockfrost check timeout",
                "default": 20,
                "validations": [
                  {
                    "required": true,
                    "error": "cardano blockfrost interval must be specified",
                    "when": { "path": "chains.cardano.type", "value": "blockfrost" }
                  }
                ]
              }
            }
          }
        }
      },
      "bitcoin": {
        "type": "object",
        "validations": [
          {
            "required": false
          }
        ],
        "children": {
          "active": {
            "type": "boolean",
            "description": "bitcoin activation state",
            "default": false,
            "validations": [
              {
                "required": true,
                "error": "bitcoin activation state must be set"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "bitcoin api type. options: esplora, rpc",
            "validations": [
              {
                "required": true,
                "error": "bitcoin type must be specified",
                "when": {"path": "chains.bitcoin.active", "value": true }
              },
              {
                "choices": ["esplora", "rpc"]
              }
            ]
          },
          "initialHeight": {
            "type": "number",
            "description": "bitcoin scanner initial height",
            "validations": [
              {
                "required": true,
                "error": "bitcoin initial height must be specified",
                "when": {"path": "chains.bitcoin.active", "value": true }
              }
            ]
          },
          "interval": {
            "type": "number",
            "description": "scanning interval (in seconds)",
            "validations": [
              {
                "required": true,
                "error": "bitcoin scanning interval must be specified",
                "when": {"path": "chains.cardano.active", "value": true }
              }
            ]
          },
          "esplora": {
            "type": "object",
            "children": {
              "timeout": {
                "type": "number",
                "description": "bitcoin esplora request timeout (in seconds)",
                "validations": [
                  {
                    "required": true,
                    "error": "bitcoin esplora timeout must be specified",
                    "when": { "path": "chains.bitcoin.type", "value": "esplora" }
                  }
                ]
              },
              "url": {
                "type": "string",
                "description": "bitcoin esplora url",
                "validations": [
                  {
                    "required": true,
                    "error": "bitcoin esplora url must be specified",
                    "when": { "path": "chains.bitcoin.type", "value": "esplora" }
                  }
                ]
              }
            }
          },
          "rpc": {
            "type": "object",
            "children": {
              "timeout": {
                "type": "number",
                "description": "bitcoin rpc request timeout (in seconds)",
                "validations": [
                  {
                    "required": true,
                    "error": "bitcoin rpc timeout must be specified",
                    "when": { "path": "chains.bitcoin.type", "value": "rpc" }
                  }
                ]
              },
              "url": {
                "type": "string",
                "description": "bitcoin rpc url",
                "validations": [
                  {
                    "required": true,
                    "error": "bitcoin rpc url must be specified",
                    "when": { "path": "chains.bitcoin.type", "value": "rpc" }
                  }
                ]
              }
            }
          }
        }
      },
      "doge": {
        "type": "object",
        "validations": [
          {
            "required": false
          }
        ],
        "children": {
          "active": {
            "type": "boolean",
            "description": "doge activation state",
            "default": false,
            "validations": [
              {
                "required": true,
                "error": "doge activation state must be set"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "doge api type. options: esplora, rpc",
            "validations": [
              {
                "required": true,
                "error": "doge type must be specified",
                "when": {"path": "chains.doge.active", "value": true }
              },
              {
                "choices": ["esplora", "rpc"]
              }
            ]
          },
          "initialHeight": {
            "type": "number",
            "description": "doge scanner initial height",
            "validations": [
              {
                "required": true,
                "error": "doge initial height must be specified",
                "when": {"path": "chains.doge.active", "value": true }
              }
            ]
          },
          "interval": {
            "type": "number",
            "description": "doge scanning interval (in seconds)",
            "validations": [
              {
                "required": true,
                "error": "doge scanning interval must be specified",
                "when": {"path": "chains.doge.active", "value": true }
              }
            ]
          },
          "esplora": {
            "type": "array",
            "items": {
              "type": "object",
              "children": {
                "timeout": {
                  "type": "number",
                  "description": "doge esplora request timeout (in seconds)",
                  "validations": [
                    {
                      "required": true,
                      "error": "doge esplora timeout must be specified",
                      "when": { "path": "chains.doge.type", "value": "esplora" }
                    }
                  ]
                },
                "url": {
                  "type": "string",
                  "description": "doge esplora url",
                  "validations": [
                    {
                      "required": true,
                      "error": "doge esplora url must be specified",
                      "when": { "path": "chains.doge.type", "value": "esplora" }
                    }
                  ]
                }
              }
            }
          },
          "rpc": {
            "type": "array",
            "items": {
              "type": "object",
              "children": {
                "timeout": {
                  "type": "number",
                  "description": "doge rpc request timeout (in seconds)",
                  "validations": [
                    {
                      "required": true,
                      "error": "doge rpc timeout must be specified",
                      "when": { "path": "chains.doge.type", "value": "rpc" }
                    }
                  ]
                },
                "url": {
                  "type": "string",
                  "description": "doge rpc url",
                  "validations": [
                    {
                      "required": true,
                      "error": "doge rpc url must be specified",
                      "when": { "path": "chains.doge.type", "value": "rpc" }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "ethereum": {
        "type": "object",
        "validations": [
          {
            "required": false
          }
        ],
        "children": {
          "active": {
            "type": "boolean",
            "description": "ethereum activation state",
            "default": false,
            "validations": [
              {
                "required": true,
                "error": "ethereum activation state must be set"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "ethereum api type. options: rpc",
            "validations": [
              {
                "required": true,
                "error": "ethereum type must be specified",
                "when": {"path": "chains.ethereum.active", "value": true }
              },
              {
                "choices": ["rpc"]
              }
            ]
          },
          "initialHeight": {
            "type": "number",
            "description": "ethereum scanner initial height",
            "validations": [
              {
                "required": true,
                "error": "ethereum initial height must be specified",
                "when": {"path": "chains.ethereum.active", "value": true }
              }
            ]
          },
          "interval": {
            "type": "number",
            "description": "ethereum scanning interval (in seconds)",
            "validations": [
              {
                "required": true,
                "error": "ethereum scanning interval must be specified",
                "when": {"path": "chains.ethereum.active", "value": true }
              }
            ]
          },
          "rpc": {
            "type": "object",
            "children": {
              "timeout": {
                "type": "number",
                "description": "ethereum rpc request timeout (in seconds)",
                "validations": [
                  {
                    "required": true,
                    "error": "ethereum rpc timeout must be specified",
                    "when": { "path": "chains.ethereum.type", "value": "rpc" }
                  }
                ]
              },
              "interval": {
                "type": "number",
                "description": "ethereum rpc request interval (in seconds)",
                "validations": [
                  {
                    "required": true,
                    "error": "ethereum rpc interval must be specified",
                    "when": { "path": "chains.ethereum.type", "value": "rpc" }
                  }
                ]
              },
              "url": {
                "type": "string",
                "description": "ethereum rpc url",
                "validations": [
                  {
                    "required": true,
                    "error": "ethereum rpc url must be specified",
                    "when": { "path": "chains.ethereum.type", "value": "rpc" }
                  }
                ]
              }
            }
          }
        }
      },
      "binance": {
        "type": "object",
        "validations": [
          {
            "required": false
          }
        ],
        "children": {
          "active": {
            "type": "boolean",
            "description": "binance activation state",
            "default": false,
            "validations": [
              {
                "required": true,
                "error": "binance activation state must be set"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "binance api type. options: rpc",
            "validations": [
              {
                "required": true,
                "error": "binance type must be specified",
                "when": {"path": "chains.binance.active", "value": true }
              },
              {
                "choices": ["rpc"]
              }
            ]
          },
          "initialHeight": {
            "type": "number",
            "description": "binance scanner initial height",
            "validations": [
              {
                "required": true,
                "error": "binance initial height must be specified",
                "when": {"path": "chains.binance.active", "value": true }
              }
            ]
          },
          "interval": {
            "type": "number",
            "description": "binance scanning interval (in seconds)",
            "validations": [
              {
                "required": true,
                "error": "binance scanning interval must be specified",
                "when": {"path": "chains.binance.active", "value": true }
              }
            ]
          },
          "rpc": {
            "type": "object",
            "children": {
              "timeout": {
                "type": "number",
                "description": "binance rpc request timeout (in seconds)",
                "validations": [
                  {
                    "required": true,
                    "error": "binance rpc timeout must be specified",
                    "when": { "path": "chains.binance.type", "value": "rpc" }
                  }
                ]
              },
              "url": {
                "type": "string",
                "description": "binance rpc url",
                "validations": [
                  {
                    "required": true,
                    "error": "binance rpc url must be specified",
                    "when": { "path": "chains.binance.type", "value": "rpc" }
                  }
                ]
              }
            }
          }
        }
      }
    }
  }
}