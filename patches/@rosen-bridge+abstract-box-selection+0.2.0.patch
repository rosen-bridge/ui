diff --git a/node_modules/@rosen-bridge/abstract-box-selection/dist/abstractBoxSelection.js b/node_modules/@rosen-bridge/abstract-box-selection/dist/abstractBoxSelection.js
index f0405fb..965f445 100644
--- a/node_modules/@rosen-bridge/abstract-box-selection/dist/abstractBoxSelection.js
+++ b/node_modules/@rosen-bridge/abstract-box-selection/dist/abstractBoxSelection.js
@@ -41,9 +41,13 @@ export class AbstractBoxSelection {
          */
         const isNativeTokenRequired = () => {
             const requiredNative = uncoveredNativeToken > 0n ? uncoveredNativeToken : 0n;
-            const additionalRequired = BigInt(Math.ceil(additionalAssets.tokens.length / maxTokenCount)) *
-                minBoxValue;
-            const fee = estimateFee(result, Math.ceil(additionalAssets.tokens.length / maxTokenCount));
+            const changeLength = additionalAssets.tokens.length
+                ? Math.ceil(additionalAssets.tokens.length / maxTokenCount)
+                : additionalAssets.nativeToken > 0n
+                    ? 1
+                    : 0;
+            const additionalRequired = BigInt(changeLength) * minBoxValue;
+            const fee = estimateFee(result, changeLength);
             return (requiredNative + additionalRequired + fee > additionalAssets.nativeToken);
         };
         const isRequirementRemaining = () => uncoveredTokens.length > 0 || isNativeTokenRequired();
@@ -128,9 +132,13 @@ export class AbstractBoxSelection {
             }
         }
         // subtract estimated fee from additional assets
-        const fee = estimateFee(result, Math.ceil(additionalAssets.tokens.length / maxTokenCount));
+        const changeLength = additionalAssets.tokens.length
+            ? Math.ceil(additionalAssets.tokens.length / maxTokenCount)
+            : additionalAssets.nativeToken > 0n
+                ? 1
+                : 0;
+        const fee = estimateFee(result, changeLength);
         additionalAssets.nativeToken -= fee;
-        const changeLength = Math.ceil(additionalAssets.tokens.length / maxTokenCount);
         const separatedAssets = [];
         for (let i = 0; i < changeLength; i++) {
             separatedAssets.push({
